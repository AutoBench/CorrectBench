############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "$fdisplay(file, "scenario: %d, a = %d, b = %d, sel = %d, out = %d", scenario, a, b, sel, out);". There could be multiple $fdisplay statements under one scenario, which means multiple test stimuli in one scenario.
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [99:0] a,
	input [99:0] b,
	input sel,
	output [99:0] out
);

Your other information:
RTL circuit problem description:
Create a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is a 2-1 multiplexer module.",
    "2. The module header specifies the inputs and outputs as follows:",
    "   - Input: 'a' which is a 100-bit vector.",
    "   - Input: 'b' which is a 100-bit vector.",
    "   - Input: 'sel' which is a 1-bit selector.",
    "   - Output: 'out' which is a 100-bit vector.",
    "3. Functional requirement: When 'sel' is 0, 'out' should reflect the value of 'a'. When 'sel' is 1, 'out' should reflect the value of 'b'."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set sel=0, apply all zeros to both a and b.",
  "scenario 2": "Set sel=0, apply all ones to a and all zeros to b.",
  "scenario 3": "Set sel=0, apply alternating 1s and 0s starting with 1 to a, and apply alternating 0s and 1s starting with 0 to b.",
  "scenario 4": "Set sel=0, apply a random 100-bit pattern to a and a different random 100-bit pattern to b.",
  "scenario 5": "Set sel=0, apply a pattern where the first half of a is all 1s and the second half is all 0s, do the reverse pattern for b.",
  "scenario 6": "Set sel=1, apply all zeros to both a and b.",
  "scenario 7": "Set sel=1, apply all zeros to a and all ones to b.",
  "scenario 8": "Set sel=1, apply alternating 1s and 0s starting with 0 to a, and apply alternating 0s and 1s starting with 1 to b.",
  "scenario 9": "Set sel=1, apply a random 100-bit pattern to a and a different random 100-bit pattern to b.",
  "scenario 10": "Set sel=1, apply a pattern where the first half of a is all 0s and the second half is all 1s, do the reverse pattern for b.",
  "scenario 11": "Change sel from 0 to 1 and back to 0 during consecutive clock cycles while maintaining static inputs a and b.",
  "scenario 12": "Change sel from 1 to 0 and back to 1 during consecutive clock cycles with static inputs a and b.",
  "scenario 13": "Rapidly toggle sel between 0 and 1 for several consecutive clock cycles with random inputs a and b."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "$fdisplay(file, "scenario: %d, a = %d, b = %d, sel = %d, out = %d", scenario, a, b, sel, out);"; There could be multiple $fdisplay statements under one scenario, which means multiple test stimuli in one scenario.
(3) Attention: before $fdisplay, you should always have a delay statement (#10) to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
module tb_top_module;
    reg [99:0] a;
    reg [99:0] b;
    reg sel;
    wire [99:0] out;
    
    integer file;
    
    top_module DUT (
        .a(a),
        .b(b),
        .sel(sel),
        .out(out)
    );
    
    initial begin
        file = $fopen("TBout.txt", "w");
        
        // Scenario 1
        a = 100'b0; b = 100'b0; sel = 0;
        #10 $fdisplay(file, "scenario: 1, a = %h, b = %h, sel = %b, out = %h", a, b, sel, out);
        
        // Scenario 2
        a = {100{1'b1}}; b = 100'b0; sel = 0;
        #10 $fdisplay(file, "scenario: 2, a = %h, b = %h, sel = %b, out = %h", a, b, sel, out);
        
        // Scenario 3
        a = 100'b1010101010_1010101010_1010101010_1010101010_1010101010_1010101010_1010101010_1010101010_1010101010_1010101010;
        b = 100'b0101010101_0101010101_0101010101_0101010101_0101010101_0101010101_0101010101_0101010101_0101010101_0101010101;
        sel = 0;
        #10 $fdisplay(file, "scenario: 3, a = %h, b = %h, sel = %b, out = %h", a, b, sel, out);
        
        // Scenario 4
        a = 100'b1101011001_0110010110_1001101101_0001011101_0110100101_1010011001_1100101010_1010110111_0011001011_1100101010;
        b = 100'b0010110101_1001010101_1100100101_1101101010_1001010101_1011100101_1101010101_0010101110_1101101010_0010101100;
        sel = 0;
        #10 $fdisplay(file, "scenario: 4, a = %h, b = %h, sel = %b, out = %h", a, b, sel, out);
        
        // Scenario 5
        a = {50{1'b1}, 50{1'b0}};
        b = {50{1'b0}, 50{1'b1}};
        sel = 0;
        #10 $fdisplay(file, "scenario: 5, a = %h, b = %h, sel = %b, out = %h", a, b, sel, out);
        
        // Scenario 6
        a = 100'b0; b = 100'b0; sel = 1;
        #10 $fdisplay(file, "scenario: 6, a = %h, b = %h, sel = %b, out = %h", a, b, sel, out);
        
        // Scenario 7
        a = 100'b0; b = {100{1'b1}}; sel = 1;
        #10 $fdisplay(file, "scenario: 7, a = %h, b = %h, sel = %b, out = %h", a, b, sel, out);
        
        // Scenario 8
        a = 100'b0101010101_0101010101_0101010101_0101010101_0101010101_0101010101_0101010101_0101010101_0101010101_0101010101;
        b = 100'b1010101010_1010101010_1010101010_1010101010_1010101010_1010101010_1010101010_1010101010_1010101010_1010101010;
        sel = 1;
        #10 $fdisplay(file, "scenario: 8, a = %h, b = %h, sel = %b, out = %h", a, b, sel, out);
        
        // Scenario 9
        a = 100'b1110010101_1111110011_0001111001_1001110100_0100111001_1011110110_1111010101_1101110101_0000110010_1101001110;
        b = 100'b0101100110_0110110010_1001011100_0011010101_1110011000_1010011101_0001101001_1011101001_1011101011_0011010111;
        sel = 1;
        #10 $fdisplay(file, "scenario: 9, a = %h, b = %h, sel = %b, out = %h", a, b, sel, out);
        
        // Scenario 10
        a = {50{1'b0}, 50{1'b1}};
        b = {50{1'b1}, 50{1'b0}};
        sel = 1;
        #10 $fdisplay(file, "scenario: 10, a = %h, b = %h, sel = %b, out = %h", a, b, sel, out);
        
        // Scenario 11
        a = 100'b1010101010_1010101010_1010101010_1010101010_1010101010_1010101010_1010101010_1010101010_1010101010_1010101010;
        b = 100'b0101010101_0101010101_0101010101_0101010101_0101010101_0101010101_0101010101_0101010101_0101010101_0101010101;
        sel = 0;
        #10 $fdisplay(file, "scenario: 11, a = %h, b = %h, sel = %b, out = %h", a, b, sel, out);
        sel = 1;
        #10 $fdisplay(file, "scenario: 11, a = %h, b = %h, sel = %b, out = %h", a, b, sel, out);
        sel = 0;
        #10 $fdisplay(file, "scenario: 11, a = %h, b = %h, sel = %b, out = %h", a, b, sel, out);
        
        // Scenario 12
        sel = 1;
        #10 $fdisplay(file, "scenario: 12, a = %h, b = %h, sel = %b, out = %h", a, b, sel, out);
        sel = 0;
        #10 $fdisplay(file, "scenario: 12, a = %h, b = %h, sel = %b, out = %h", a, b, sel, out);
        sel = 1;
        #10 $fdisplay(file, "scenario: 12, a = %h, b = %h, sel = %b, out = %h", a, b, sel, out);

        // Scenario 13
        repeat (6) begin
            a = $random; b = $random; sel = ~sel;
            #10 $fdisplay(file, "scenario: 13, a = %h, b = %h, sel = %b, out = %h", a, b, sel, out);
        end

        $fclose(file);
    end
endmodule
```

