############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input clk,
	input load,
	input ena,
	input [1:0] amount,
	input [63:0] data,
	output reg [63:0] q);

Your other information:
RTL circuit problem description:
Build a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by "amount." Assume the right shit is an arithmetic right shift. 

// Signals are defined as below:
// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.
// (2) ena: Chooses whether to shift. Active high. 
// (3) amount: Chooses which direction and how much to shift. 
//     (a) 2'b00: shift left by 1 bit. 
//     (b) 2'b01: shift left by 8 bits. 
//     (c) 2'b10: shift right by 1 bit. 
//     (d) 2'b11: shift right by 8 bits. 
// (4) q: The contents of the shifter.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Initialize the DUT. Set 'load' high and load the register with a 64-bit known pattern, for example, 0xAAAAAAAAAAAAAAAA at cycle 1.",
  "scenario 2": "With 'ena' high, set 'amount' to 2'b00 to shift left by 1 bit at cycle 2. Observe the register contents after the shift.",
  "scenario 3": "With 'ena' high, set 'amount' to 2'b01 to shift left by 8 bits at cycle 3. Observe the register contents after the shift.",
  "scenario 4": "With 'ena' high, set 'amount' to 2'b10 to perform an arithmetic shift right by 1 bit at cycle 4. Observe the register contents after the shift.",
  "scenario 5": "With 'ena' high, set 'amount' to 2'b11 to perform an arithmetic shift right by 8 bits at cycle 5. Observe the register contents after the shift.",
  "scenario 6": "With 'ena' low, attempt a shift operation with 'amount' set to any value (e.g., 2'b00) at cycle 6, verify that the contents of the register do not change.",
  "scenario 7": "Toggle 'load' high without 'ena' to load a new 64-bit pattern, for example, 0x5555555555555555, at cycle 7, overriding any shift operation.",
  "scenario 8": "Alternate between loading a new pattern and shifting to verify that loads take precedence over shifts. Set 'load' high to load 0xFFFFFFFFFFFFFFFF at cycle 8, then 'ena' high and shift left by 1 bit in the next clock cycle 9 with 'amount' set to 2'b00.",
  "scenario 9": "Check edge cases by loading a pattern with the sign bit set (e.g., 0x8000000000000000) and perform an arithmetic shift right by 1 and by 8. Verify the sign bit behavior in cycles 10 and 11 with 'amount' set to 2'b10 and 2'b11 respectively.",
  "scenario 10": "Perform several consecutive shifts without intervening load operations to ensure that sequential shifting is accurate. Start shifting left by 1 bit from cycle 12 to cycle 14 with 'amount' set to 2'b00.",
  "scenario 11": "After several shifts, perform a load operation to ensure the register can still be loaded correctly, loading 0x123456789ABCDEF0 in cycle 15 with 'load' high."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  load;
reg  ena;
reg [1:0] amount;
reg [63:0] data;
wire [63:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.load(load),
	.ena(ena),
	.amount(amount),
	.data(data),
	.q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, amount = %d, data = %d, q = %d", scenario, clk, load, ena, amount, data, q);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, amount = %d, data = %d, q = %d", scenario, clk, load, ena, amount, data, q);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  load;
reg  ena;
reg [1:0] amount;
reg [63:0] data;
wire [63:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
    .clk(clk),
    .load(load),
    .ena(ena),
    .amount(amount),
    .data(data),
    .q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin
    // scenario 1
    scenario = 1;
    load = 1;
    ena = 0;
    amount = 2'b00;
    data = 64'hAAAAAAAAAAAAAAAA;
    #10; // Cycle 1
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, amount = %d, data = %d, q = %d", scenario, clk, load, ena, amount, data, q);

    // scenario 2
    scenario = 2;
    load = 0;
    ena = 1;
    amount = 2'b00;
    #10; // Cycle 2
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, amount = %d, data = %d, q = %d", scenario, clk, load, ena, amount, data, q);

    // scenario 3
    scenario = 3;
    amount = 2'b01;
    #10; // Cycle 3
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, amount = %d, data = %d, q = %d", scenario, clk, load, ena, amount, data, q);

    // scenario 4
    scenario = 4;
    amount = 2'b10;
    #10; // Cycle 4
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, amount = %d, data = %d, q = %d", scenario, clk, load, ena, amount, data, q);

    // scenario 5
    scenario = 5;
    amount = 2'b11;
    #10; // Cycle 5
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, amount = %d, data = %d, q = %d", scenario, clk, load, ena, amount, data, q);

    // scenario 6
    scenario = 6;
    ena = 0;
    amount = 2'b00;
    #10; // Cycle 6
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, amount = %d, data = %d, q = %d", scenario, clk, load, ena, amount, data, q);

    // scenario 7
    scenario = 7;
    load = 1;
    ena = 0;
    data = 64'h5555555555555555;
    #10; // Cycle 7
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, amount = %d, data = %d, q = %d", scenario, clk, load, ena, amount, data, q);

    // scenario 8
    scenario = 8;
    load = 1;
    data = 64'hFFFFFFFFFFFFFFFF;
    #10; // Cycle 8
    ena = 1;
    load = 0;
    amount = 2'b00;
    #10; // Cycle 9
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, amount = %d, data = %d, q = %d", scenario, clk, load, ena, amount, data, q);

    // scenario 9
    scenario = 9;
    load = 1;
    data = 64'h8000000000000000;
    #10; // Loading at Cycle 10
    load = 0;
    ena = 1;
    amount = 2'b10;
    #10; // Cycle 10
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, amount = %d, data = %d, q = %d", scenario, clk, load, ena, amount, data, q);
    amount = 2'b11;
    #10; // Cycle 11
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, amount = %d, data = %d, q = %d", scenario, clk, load, ena, amount, data, q);

    // scenario 10
    scenario = 10;
    load = 0;
    amount = 2'b00;
    repeat(3) begin
        #10; // Cycles 12-14
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, amount = %d, data = %d, q = %d", scenario, clk, load, ena, amount, data, q);
    end

    // scenario 11
    scenario = 11;
    load = 1;
    ena = 0;
    data = 64'h123456789ABCDEF0;
    #10; // Cycle 15
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, amount = %d, data = %d, q = %d", scenario, clk, load, ena, amount, data, q);

    $fclose(file);
    $finish;
end

endmodule
```

