############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The information we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in stage 3; in this stage, please give me the core rules of an ideal DUT. you should give these rules in python. (For convenience, you can use binary or hexadecimal format in python, i.e. 0b0010 and 0x1a). Later we will use these ideal rules to generate expected values in each test scenario. currently you must only generate the core part of the rules. the input of these rules should be related to the test vectors from test scenario. the rule should give the expected values under test vectors. You don't need to consider the control signals like clk or reset, unless the core rules of this task are about these signals. You can use numpy, scipy or other third party python libraries to help you write the rules. Please import them if you need. 
3. your information is:
RTL circuit problem description:
Build a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by "amount." Assume the right shit is an arithmetic right shift. 

// Signals are defined as below:
// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.
// (2) ena: Chooses whether to shift. Active high. 
// (3) amount: Chooses which direction and how much to shift. 
//     (a) 2'b00: shift left by 1 bit. 
//     (b) 2'b01: shift left by 8 bits. 
//     (c) 2'b10: shift right by 1 bit. 
//     (d) 2'b11: shift right by 8 bits. 
// (4) q: The contents of the shifter.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is a 64-bit arithmetic shift register with synchronous load capability.",
    "2. The module header for the DUT is: module top_module(input clk, input load, input ena, input [1:0] amount, input [63:0] data, output reg [63:0] q);",
    "3. The 'load' signal is used to synchronously load the shift register with data[63:0] when it is high, overriding the shift operation.",
    "4. The 'ena' signal determines if the shift operation should take place. If 'ena' is high, shifting is enabled and will occur.",
    "5. The 'amount' signal selects the direction and number of positions to shift as follows: (a) 2'b00: shift left by 1 bit, (b) 2'b01: shift left by 8 bits, (c) 2'b10: shift right by 1 bit, (d) 2'b11: shift right by 8 bits.",
    "6. The shift right operation is an arithmetic right shift, which means it preserves the sign bit on right shifts.",
    "7. The output 'q' holds the 64-bit contents of the shifter, affected by the load or shift operations based on the control signals (load, ena, amount)."
  ]
}
DUT header:
module top_module(
	input clk,
	input load,
	input ena,
	input [1:0] amount,
	input [63:0] data,
	output reg [63:0] q);

test scenario: (please note the test vectors below, it will help you determine the input parameters of the rules)
{
  "scenario 1": "Initialize the DUT. Set 'load' high and load the register with a 64-bit known pattern, for example, 0xAAAAAAAAAAAAAAAA at cycle 1.",
  "scenario 2": "With 'ena' high, set 'amount' to 2'b00 to shift left by 1 bit at cycle 2. Observe the register contents after the shift.",
  "scenario 3": "With 'ena' high, set 'amount' to 2'b01 to shift left by 8 bits at cycle 3. Observe the register contents after the shift.",
  "scenario 4": "With 'ena' high, set 'amount' to 2'b10 to perform an arithmetic shift right by 1 bit at cycle 4. Observe the register contents after the shift.",
  "scenario 5": "With 'ena' high, set 'amount' to 2'b11 to perform an arithmetic shift right by 8 bits at cycle 5. Observe the register contents after the shift.",
  "scenario 6": "With 'ena' low, attempt a shift operation with 'amount' set to any value (e.g., 2'b00) at cycle 6, verify that the contents of the register do not change.",
  "scenario 7": "Toggle 'load' high without 'ena' to load a new 64-bit pattern, for example, 0x5555555555555555, at cycle 7, overriding any shift operation.",
  "scenario 8": "Alternate between loading a new pattern and shifting to verify that loads take precedence over shifts. Set 'load' high to load 0xFFFFFFFFFFFFFFFF at cycle 8, then 'ena' high and shift left by 1 bit in the next clock cycle 9 with 'amount' set to 2'b00.",
  "scenario 9": "Check edge cases by loading a pattern with the sign bit set (e.g., 0x8000000000000000) and perform an arithmetic shift right by 1 and by 8. Verify the sign bit behavior in cycles 10 and 11 with 'amount' set to 2'b10 and 2'b11 respectively.",
  "scenario 10": "Perform several consecutive shifts without intervening load operations to ensure that sequential shifting is accurate. Start shifting left by 1 bit from cycle 12 to cycle 14 with 'amount' set to 2'b00.",
  "scenario 11": "After several shifts, perform a load operation to ensure the register can still be loaded correctly, loading 0x123456789ABCDEF0 in cycle 15 with 'load' high."
}
your response should only contain python code. For convenience, you can use binary or hexadecimal format in python. For example: 0b0010 and 0x1a


########## assistant ##########
```python
def calculate_expected_value(data, load, ena, amount, current_q):
    """
    Calculate the expected value of the shift register based on the input conditions.

    :param data: The data input to load into the shift register (64-bit integer).
    :param load: The load signal, active high (boolean).
    :param ena: The enable signal, active high (boolean).
    :param amount: The 2-bit shift control signal indicating direction and magnitude (0b00, 0b01, 0b10, 0b11).
    :param current_q: The current value of the shift register (64-bit integer).
    :return: The expected value of the shift register (64-bit integer).
    """
    if load:
        # If load is active, load the data into the shift register
        return data
    elif ena:
        if amount == 0b00:
            # Shift left by 1
            return (current_q << 1) & 0xFFFFFFFFFFFFFFFF
        elif amount == 0b01:
            # Shift left by 8
            return (current_q << 8) & 0xFFFFFFFFFFFFFFFF
        elif amount == 0b10:
            # Arithmetic shift right by 1
            # Preserve the sign bit: extend the sign bit
            return (current_q >> 1) | ((current_q & 0x8000000000000000) >> 1)
        elif amount == 0b11:
            # Arithmetic shift right by 8
            # Preserve the sign bit: extend the sign bit
            return (current_q >> 8) | ((current_q & 0x8000000000000000) >> 8)
    # If load is not active and ena is low, the value of q doesn't change
    return current_q

# Example usage:
# Let's assume we want to compute the expected value for each scenario:
# For scenario 1
load = True
ena = False
amount = 0b00
data = 0xAAAAAAAAAAAAAAAA
current_q = 0
expected_value_scenario_1 = calculate_expected_value(data, load, ena, amount, current_q)

# For scenario 2, we need to update current_q with the result of scenario 1
load = False
ena = True
amount = 0b00
data = 0  # Data is irrelevant when load is not active
current_q = expected_value_scenario_1
expected_value_scenario_2 = calculate_expected_value(data, load, ena, amount, current_q)

# And so on for the remaining scenarios.
```

