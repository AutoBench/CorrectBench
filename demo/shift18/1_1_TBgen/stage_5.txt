############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. background: Your task is to verify the functional correctness of a verilog RTL module code (we call it as "DUT", device under test). This module is a sequential circuit. Our plan is to first export the signals (input and output) of the DUT under test scenarios. Then, we will use a python script to check the correctness of DUT.
2. You are in stage 5. In this stage, we already exported the signals of DUT. The signals are like below: (the signal names are real, but the values are just for example, clock signals are not included, each vector represents a new clock cycle)
[{'check_en': False, 'scenario': 1, 'load': 1, 'ena': 1, 'amount': 1, 'data': 1, 'q': 1}, {'check_en': False, 'scenario': 1, 'load': 1, 'ena': 1, 'amount': 1, 'data': 1, 'q': 1}, {'check_en': True, 'scenario': 1, 'load': 1, 'ena': 1, 'amount': 1, 'data': 1, 'q': 1}]
Here's the explanation of some special signals in signal vectors: 
- "scenario": The "scenario" is not DUT's signal but to tell you the current scenario index. 
- "check_en": The "check_en" signal is not from the DUT. "Check_en" is a bool value to tell you this is the time to check the output of DUT. It is related to the class method "check" (we will explain it later). After checking the output, a new scenario will start.
3. Your current task is: write a python class "GoldenDUT". This python class can represent the golden DUT (the ideal one). In your "GoldenDUT", you should do the following things:
- 3.1. write a method "def __init__(self)". Set the inner states/values of the golden DUT. These values have suffix "_reg". The initial value of these inner values is "x", but later will be digits. The "__init__" method has no input parameters except "self".
- 3.2. write a method "def load(self, signal_vector)". This method is to load the important input signals and the inner values of "GoldenDUT" shall change according to the input signals. There is no clock signal in the input signal vector, every time the "load" method is called, it means a new clock cycle. The initial values "x" should be changed according to the input signals. This method has no return value.
- 3.3. write a method "def check(self, signal_vector)". This method is to determine the expected output values and compare them with output signals from DUT. It should return True or False only. If return false, please print the error message. Hint: you can use code like "print(f"Scenario: {signal_vector['scenario']}, expected: a={a_reg}, observed a={a_observed}")" to print, suppose "a" is the output signal's name.
- 3.4. write other methods you need, they can be called by "load" or "check".
- 3.5. the input of "load" and "check" is the signal vector. The signal vector is a dictionary, the key is the signal name, the value is the signal value.
4. Other information:
- You can use binary (like 0x1101), hexadecimal (like 0x1a) or normal number format in python.
- if the bit width of one variable is limited, use bit mask to assure the correctness of the value.
- you can import numpy, math, scipy or other python libraries to help you write the python class.
5. You have the information below to help you check the correctness of DUT:

DUT circuit problem description:
Build a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by "amount." Assume the right shit is an arithmetic right shift. 

// Signals are defined as below:
// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.
// (2) ena: Chooses whether to shift. Active high. 
// (3) amount: Chooses which direction and how much to shift. 
//     (a) 2'b00: shift left by 1 bit. 
//     (b) 2'b01: shift left by 8 bits. 
//     (c) 2'b10: shift right by 1 bit. 
//     (d) 2'b11: shift right by 8 bits. 
// (4) q: The contents of the shifter.
The header of DUT (note the input and output signals):
module top_module(
	input clk,
	input load,
	input ena,
	input [1:0] amount,
	input [63:0] data,
	output reg [63:0] q);

Here is the basic rules in python for the module. It was generated in previous stage. You can use it as a reference, but you should write your own python script. This is just for your better understanding. You can use them or not in your python class
def calculate_expected_value(data, load, ena, amount, current_q):
    """
    Calculate the expected value of the shift register based on the input conditions.

    :param data: The data input to load into the shift register (64-bit integer).
    :param load: The load signal, active high (boolean).
    :param ena: The enable signal, active high (boolean).
    :param amount: The 2-bit shift control signal indicating direction and magnitude (0b00, 0b01, 0b10, 0b11).
    :param current_q: The current value of the shift register (64-bit integer).
    :return: The expected value of the shift register (64-bit integer).
    """
    if load:
        # If load is active, load the data into the shift register
        return data
    elif ena:
        if amount == 0b00:
            # Shift left by 1
            return (current_q << 1) & 0xFFFFFFFFFFFFFFFF
        elif amount == 0b01:
            # Shift left by 8
            return (current_q << 8) & 0xFFFFFFFFFFFFFFFF
        elif amount == 0b10:
            # Arithmetic shift right by 1
            # Preserve the sign bit: extend the sign bit
            return (current_q >> 1) | ((current_q & 0x8000000000000000) >> 1)
        elif amount == 0b11:
            # Arithmetic shift right by 8
            # Preserve the sign bit: extend the sign bit
            return (current_q >> 8) | ((current_q & 0x8000000000000000) >> 8)
    # If load is not active and ena is low, the value of q doesn't change
    return current_q

# Example usage:
# Let's assume we want to compute the expected value for each scenario:
# For scenario 1
load = True
ena = False
amount = 0b00
data = 0xAAAAAAAAAAAAAAAA
current_q = 0
expected_value_scenario_1 = calculate_expected_value(data, load, ena, amount, current_q)

# For scenario 2, we need to update current_q with the result of scenario 1
load = False
ena = True
amount = 0b00
data = 0  # Data is irrelevant when load is not active
current_q = expected_value_scenario_1
expected_value_scenario_2 = calculate_expected_value(data, load, ena, amount, current_q)

# And so on for the remaining scenarios.



[IMPORTANT]
I will repeat the important information: 
3. Your current task is: write a python class "GoldenDUT". This python class can represent the golden DUT (the ideal one). In your "GoldenDUT", you should do the following things:
- 3.1. write a method "def __init__(self)". Set the inner states/values of the golden DUT. These values have suffix "_reg". The initial value of these inner values should be digits. You can set the initial values according to information or just "0"s. The "__init__" method has no input parameters except "self".
- 3.2. write a method "def load(self, signal_vector)". This method is to load the important input signals and the inner values of "GoldenDUT" shall change according to the input signals. There is no clock signal in the input signal vector, every time the "load" method is called, it means a new clock cycle. The initial values "x" should be changed according to the input signals. This method has no return value.
- 3.3. write a method "def check(self, signal_vector)". This method is to determine the expected output values and compare them with output signals from DUT. It should return True or False only. If return false, please print the error message. Hint: you can use code like "print(f"Scenario: {signal_vector['scenario']}, expected: a={a_reg}, observed a={a_observed}")" to print, suppose "a" is the output signal's name.  
- 3.4. write other methods you need, they can be called by "load" or "check".
- 3.5. the input of "load" and "check" is the signal vector. The signal vector is a dictionary, the key is the signal name, the value is the signal value.
4. Other information:
- You can use binary (like 0x1101), hexadecimal (like 0x1a) or normal number format in python.
- if the bit width of one variable is limited, use bit mask to assure the correctness of the value.
- you can import numpy, math, scipy or other python libraries to help you write the python class.

please only reply the python codes of the python class. no other words.



########## assistant ##########
```python
class GoldenDUT:
    def __init__(self):
        # Initialize internal state register
        self.q_reg = 0
        
    def load(self, signal_vector):
        # Load the input signals and update the internal state
        load = signal_vector['load']
        ena = signal_vector['ena']
        data = signal_vector['data']
        amount = signal_vector['amount']
        current_q = self.q_reg
        
        if load:
            # Load data into the shift register
            self.q_reg = data & 0xFFFFFFFFFFFFFFFF  # Ensure 64-bit width
        elif ena:
            if amount == 0b00:
                # Shift left by 1
                self.q_reg = (current_q << 1) & 0xFFFFFFFFFFFFFFFF
            elif amount == 0b01:
                # Shift left by 8
                self.q_reg = (current_q << 8) & 0xFFFFFFFFFFFFFFFF
            elif amount == 0b10:
                # Arithmetic shift right by 1
                self.q_reg = (current_q >> 1) | ((current_q & 0x8000000000000000) >> 1)
            elif amount == 0b11:
                # Arithmetic shift right by 8
                self.q_reg = (current_q >> 8) | ((current_q & 0x8000000000000000) >> 8)
        
    def check(self, signal_vector):
        # Check expected and observed output values
        q_observed = signal_vector['q']
        q_expected = self.q_reg
        
        if q_expected == q_observed:
            return True
        else:
            print(f"Scenario: {signal_vector['scenario']}, expected: q={q_expected}, observed q={q_observed}")
            return False
```

