stage 1:

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. You are in the first stage. In this stage, please summarize the technical details of the DUT and give me a technical specification of the testbench generation task, so we can use it to design its corresponding testbench.
3. The core of testbench is the testcases. It usually include two parts logically: the input signals to the DUT and the expected result signals from DUT. The testbench will send the input signals to DUT and check if the result signals are the same as the expected result signals. If they are the same, this means the DUT is passed. Otherwise the DUT fails.
4. Your technical specification should include these sections:
- section 1: specification of the DUT, including the module header of the RTL code. If table or other detailed data is provided in the original problem description, DO repeat them in your response. They are very important!!!
5. please denote "section 1" at the beginning of your reply. 
6. below is the information including the problem description and the DUT header:

[problem description from HDLBits]

[module header]

///////////////////////////////
stage 2:
1. overview: Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. current stage: you are in the second stage. The first stage has already summarized some technical specification of the DUT, which is section 1.
3. current task:
- section 2: Testbench scenarios: please focus on the test scenarios. A test scenario is a set of input signals. For sequential circuits, longer time for further states also matters. Please list all of the test scenarios according to the specification of the DUT. For sequential circuits please also denote the clk cycles needed. Scenarios should be concise but complete.
4. Very important: you should only give me the scenarios information. Do not give me other information. please denote "section 2" at the beginning of your reply.

below is the information from the original problem description:
[problem description from HDLBits]

below are the messages from the first stage:
[response from stage 1]

///////////////////////////////
stage 3:
1. overview: Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. current stage: You are in the third stage. the first stage has already summarized some useful information for you, including section 1 and section 2. Section 1 contains a summary of DUT's technical specification. Section 2 contains the scenarios to test.
3. current task: 
- section 3: the rules to generate expected results from inputs (section2). Please use python code to describe them. please denote "section 3" at the beginning of your reply.
##- section 4: Please give some template Test cases (input + expected output) to make your response easier to be understood. It can be in the form of table.

below is the information from the original problem description:
[problem description from HDLBits]

below are the messages from the first stage:
[response from stage 1]

below are the messages from the second stage:
[response from stage 2]


///////////////////////////////
stage 4:

You are a very professional verilog testbench generator. You will finish my task according to the information and instruction

Here is the information (start and end with "{{" and "}}"):
{{
[response from stage 1]
[response from stage 2]
[response from stage 3]
}}
information end

According to the information above, 
1. please generate a verilog testbench code to test the DUT in specification. Your code should include all of the testcases. Do not leave any blank!!!!! (this is very important)
2. the defination of the sections in the information below:
- section 1: specification of the DUT, including the module header of the RTL code. This may include some table or other detailed information
- section 2: Testbench scenarios: this includes all the scenarios to be test. each scenario may contain a set of test cases. This is the input of DUT in testbench.
- section 3: the rules to generate expected results from inputs (section2). this can generate the expected result signals. the result signals will then be compared with the output signals from DUT.
3. The core of testbench is the testcases. It usually include three parts logically: the input signals to the DUT (from section2 scenarios), the DUT and the expected result signals from DUT (from section 3). The testbench will send the input signals to DUT and check if the result signals are the same as the expected result signals. If they are the same, this means the DUT is passed. Otherwise the DUT fails.
##- section 4: Some template Test cases (input + expected output) for better understanding. It can be in the form of table.
3. very important: Your testbench testcases should strongly rely on the python code and the scenarios metioned in section 2. You can also make a supplement if the logic or the scenarios are not complete.
4. very important: If all the test cases pass, the testbench should display "all test cases passed". If any one of the test cases fails, testbench should not display "all test caess passed". 
5. There should be clear enough messages indicate the reason and details when test does not pass.
6. attention! Your reply should only contain the testbench code. reply template:

[testbench template]


Do not leave any blank!!! Your generated testbench will be used for verification. You MUST provide the complete Testbench. We have enough space and money for a complete testbench!!!