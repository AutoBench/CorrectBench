stage 1:

[json_mode: True]
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. You are in the first stage. In this stage, please summarize the technical details of the DUT and give me a technical specification of the testbench generation task, so we can use it to design its corresponding testbench.
3. The core of testbench is the testcases. It usually include two parts logically: the input signals to the DUT and the expected result signals from DUT. The testbench will send the input signals to DUT and check if the result signals are the same as the expected result signals. If they are the same, this means the DUT is passed. Otherwise the DUT fails.
4. Your technical specification should include these sections:
- section 1: specification of the DUT, including the module header of the RTL code. If table or other detailed data is provided in the original problem description, DO repeat them in your response. They are very important!!!
5. your response should be in the form of JSON.
6. below is the information including the problem description and the DUT header:

[problem description from HDLBits]
[module header]

your response must be in JSON form. example:

{
  "important data": "...", # type: string. If no table, state transition or other direct data, leave this with ""
  "technical specifications": ["...", "...", ...] # each element of the list is one specification string, the starting of the string is its index 
}

///////////////////////////////
stage 2:

[json_mode: True]

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our final target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. each test scenario should include:
- 3.1 the motivation of this test scenario in the natural language description.
- 3.2 how to set the input signals of DUT (or we call this as test stimuli)
- 3.3 If clk is included, please note the time of this test scenario
- 3.4 above information should be in the form of one string.
4. Your test scenario should not include any information about the expected outputs.
5. your information is:

[problem description from HDLBits]
[module header]
[response from stage 1][JSON]

again: each test scenario should include:
- 1. the motivation of this test scenario in the natural language description.
- 2. how to set the input signals of DUT (or we call this as test stimuli)
- 3. If clk is included, please note the time of this test scenario
- 4. above information should be in the form of one string.

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string. This string contains all information, including motivation, test stimuli and time (if clk signal is included)
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}

[$$check scenarios$$]

///////////////////////////////
stage 2b:

[json_mode: True]

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our final target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2b. in this section, you will be provided with test scenarios. Your task is to determin the Strategy we use in each scenario. Our strategy is directly checking some property of the output or the value if the scenario is a simple one.
for example:
if there is a 32*32 multiplier, and the scenario is one of the input number is 1, then you only need to check if the output is equal to the other input. This is a shortcut of verification. try to find the shortcut of verifying the output values from DUT. If you cannot find, then check the output according to the rules of the problem
3. Important!!! For each scenario, you should describe the testbench reaction to this scenario. your answer to each scenario should be a string.
4. your information is:

[problem description from HDLBits]
[module header]
[response from stage 1][JSON]

test scenarios: (Very important!!!)
[response from stage 2][JSON]

instruction again:
Your task is to determin the Strategy we use in each scenario. Our strategy is directly checking some property of the output or the value if the scenario is a simple one.
for example:
if there is a 32*32 multiplier, and the scenario is one of the input number is 1, then you only need to check if the output is equal to the other input. This is a shortcut of verification. try to find the shortcut of verifying the output values from DUT. If you cannot find, then check the output according to the rules of the problem
Important!!! For each scenario, you should describe the testbench reaction to this scenario. your answer to each scenario should be a string.

your response must be in JSON form. example:
{
  "scenario 1": "...", # your answer to this scenario; (If choose Option 1 then it is "GOLDEN DUT")
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}

///////////////////////////////
stage 4:

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors
- 1.5. test strategies for scenarios
Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements from the problem description.
2. you are in section 4. in this section, you will be provided with test scenarios, strategies and golden DUT. please highly based on these information to generate the testbench.
3. There should be a reg "error". It is "0" at the beginning. In each scenario, if test fails, the error should become "1" permanently and testbench should print like "scenario ... failed, got ..., expected ...". At the end of the test, if the "error" is still "0", testbench should print "All test cases passed!". This is very important!
4. our testbench is based on test scenario. you should use the strategy in the "Scenario Testing Strategies". please directly check some property of the output or the value according to the strategy. 

5. your information is:

[problem description from HDLBits]
[module header]

[response from stage 1][JSON]

IMPORTANT - test scenario:
[response from stage 2][JSON]
IMPORTANT - the "Scenario Testing Strategies" is :
[response from stage 2b]

please only generate the verilog codes, no other words. don't forget to print "All test cases passed!" if "error" is 0 at the end!